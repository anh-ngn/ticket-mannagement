// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app/warehouse/tm_service/api/api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Ticket with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Ticket) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TicketId

	// no validation rules for UserId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Priority

	// no validation rules for Status

	return nil
}

// TicketValidationError is the validation error returned by Ticket.Validate if
// the designated constraints aren't met.
type TicketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketValidationError) ErrorName() string { return "TicketValidationError" }

// Error satisfies the builtin error interface
func (e TicketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketValidationError{}

// Validate checks the field values on GetTicketByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTicketByIdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TicketId

	return nil
}

// GetTicketByIdRequestValidationError is the validation error returned by
// GetTicketByIdRequest.Validate if the designated constraints aren't met.
type GetTicketByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketByIdRequestValidationError) ErrorName() string {
	return "GetTicketByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTicketByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketByIdRequestValidationError{}

// Validate checks the field values on CreateTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for Priority

	return nil
}

// CreateTicketRequestValidationError is the validation error returned by
// CreateTicketRequest.Validate if the designated constraints aren't met.
type CreateTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTicketRequestValidationError) ErrorName() string {
	return "CreateTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTicketRequestValidationError{}

// Validate checks the field values on CreateTicketResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTicketResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	// no validation rules for TicketId

	return nil
}

// CreateTicketResponseValidationError is the validation error returned by
// CreateTicketResponse.Validate if the designated constraints aren't met.
type CreateTicketResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTicketResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTicketResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTicketResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTicketResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTicketResponseValidationError) ErrorName() string {
	return "CreateTicketResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTicketResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTicketResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTicketResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTicketResponseValidationError{}

// Validate checks the field values on UpdateTicketStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTicketStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TicketId

	// no validation rules for Status

	return nil
}

// UpdateTicketStatusRequestValidationError is the validation error returned by
// UpdateTicketStatusRequest.Validate if the designated constraints aren't met.
type UpdateTicketStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTicketStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTicketStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTicketStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTicketStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTicketStatusRequestValidationError) ErrorName() string {
	return "UpdateTicketStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTicketStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTicketStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTicketStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTicketStatusRequestValidationError{}

// Validate checks the field values on UpdateTicketStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTicketStatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// UpdateTicketStatusResponseValidationError is the validation error returned
// by UpdateTicketStatusResponse.Validate if the designated constraints aren't met.
type UpdateTicketStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTicketStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTicketStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTicketStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTicketStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTicketStatusResponseValidationError) ErrorName() string {
	return "UpdateTicketStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTicketStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTicketStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTicketStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTicketStatusResponseValidationError{}
