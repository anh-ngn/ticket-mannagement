// Code generated by tekit-gen-project. DO NOT EDIT.
package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"

	"go.tekoapis.com/tekone/app/warehouse/tm_service/config"
	"go.tekoapis.com/tekone/library/database/migrate"
	"go.tekoapis.com/tekone/library/server"

	"github.com/go-logr/logr"
	"github.com/urfave/cli/v2"
)

func main() {
	if err := run(os.Args); err != nil {
		log.Fatal(err)
	}
}

// var app *cli.App
var cfg *config.Config

var logger logr.Logger

func run(args []string) error {
	var err error
	cfg, err = config.Load()
	if err != nil {
		return err
	}

	logger = cfg.Log.MustBuildLogR()

	if cfg.Env == "dev" {
		fmt.Println(cfg)
	}

	flush, err := cfg.Tracing.Build()
	if err != nil {
		fmt.Printf("cannot setup tracer: %v\n", err)
	} else {
		defer flush()
	}

	app := cli.NewApp()
	app.Name = "service"
	// app.Usage = "tekit tool"
	// app.Version = Version
	app.Commands = []*cli.Command{
		{
			Name:   "server",
			Usage:  "start grpc/http server",
			Action: serverAction,
		},
		{
			Name:   "config-dump",
			Usage:  "dump config out",
			Action: configDumpAction,
		},
		{
			Name:  "migrate",
			Usage: "doing database migration",
			// Code generated by tekit-gen-project with database option.
			Subcommands: migrate.CliCommand("sql/migrations", cfg.PostgreSQL.DSN()),
		},
	}
	// Need to implement other commands , in a separate file, commands.go, if any
	addOtherCommands(app)

	if err := app.Run(os.Args); err != nil {
		panic(err)
	}
	return nil
}

func configDumpAction(cliCtx *cli.Context) error {
	b, err := json.MarshalIndent(cfg, "", "\t")

	fmt.Println(string(b))
	return err
}

func serverAction(cliCtx *cli.Context) error {

	service, err := newService(cfg)
	if err != nil {
		logger.Error(err, "Error init servers")
		return err
	}

	s, err := server.New(
		server.WithGrpcAddrListen(cfg.Server.GRPC),
		server.WithGatewayAddrListen(cfg.Server.HTTP),
		server.WithServiceServer(service),
	)
	if err != nil {
		logger.Error(err, "Error new server", err)
		return err
	}

	if err := s.Serve(); err != nil {
		logger.Error(err, "Error start server")
		return err
	}
	return nil
}
