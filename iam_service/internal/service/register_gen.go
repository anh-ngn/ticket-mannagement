// Code generated by tekit-gen-project. DO NOT EDIT.
package service

import (
	"context"

	"go.tekoapis.com/tekone/app/warehouse/iam_service/api"
	health "go.tekoapis.com/tekone/library/grpc/health"

	"github.com/grpc-ecosystem/grpc-gateway/runtime"
	"google.golang.org/grpc"
)

// RegisterWithServer implementing service server interface
func (s *Service) RegisterWithServer(server *grpc.Server) {
	health.RegisterHealthCheckServiceServer(server, s)
	api.RegisterIamServiceServer(server, s)
}

// RegisterWithHandler implementing service server interface
func (s *Service) RegisterWithHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	err := api.RegisterIamServiceHandler(ctx, mux, conn)
	if err != nil {
		s.log.Error(err, "Error register servers")
	}
	err = health.RegisterHealthCheckServiceHandler(ctx, mux, conn)
	if err != nil {
		s.log.Error(err, "Error register health servers")
	}

	return err
}

// Liveness handle socket is open or not
func (s *Service) Liveness(ctx context.Context, req *health.LivenessRequest) (*health.LivenessResponse, error) {
	err := s.Ping()
	if err != nil {
		return nil, err
	}

	return &health.LivenessResponse{
		Content: "ok",
	}, nil
}

// Readiness handle application is ready or not
// this should take into account, saturation of the pod, instead
func (s *Service) Readiness(ctx context.Context, req *health.ReadinessRequest) (*health.ReadinessResponse, error) {
	return &health.ReadinessResponse{
		Content: "ok",
	}, nil
}
